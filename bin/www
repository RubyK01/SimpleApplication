var app = require('../app');
var debug = require('debug')('phishsense:server');
var http = require('http');
var fs = require('fs');
var https = require('https');

function normalizePort(val) {
  var port = parseInt(val, 10);
  if (isNaN(port)) return val; // named pipe
  if (port >= 0) return port; // port number
  return false;
}

function onError(error) {
  if (error.syscall !== 'listen') throw error;
  var bind = typeof port === 'string' ? 'Pipe ' + port : 'Port ' + port;
  switch (error.code) {
    case 'EACCES': console.error(bind + ' requires elevated privileges'); process.exit(1); break;
    case 'EADDRINUSE': console.error(bind + ' is already in use'); process.exit(1); break;
    default: throw error;
  }
}

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string' ? 'pipe ' + addr : 'port ' + addr.port;
  debug('Listening on ' + bind);
}

var port = normalizePort(process.env.PORT || '8080');
var https_port = process.env.PORT_HTTPS || 8443;
var options = {};

if (process.env.ENV !== "DEV") {
  try {
    var privateKeyPath = 'privatekey.pem';
    var certificatePath = 'server.crt';
    var privateKey = fs.readFileSync(privateKeyPath, "utf8");
    var certificate = fs.readFileSync(certificatePath, "utf8");

    function extractPEMContent(pem, header, footer) {
      var content = pem.split(header)[1];
      if (!content) {
        throw new Error(`The PEM file does not contain the expected header: ${header}`);
      }
      content = content.split(footer)[0];
      if (!content) {
        throw new Error(`The PEM file does not contain the expected footer: ${footer}`);
      }
      return header + "\n" + content.trim().replace(/ /g, "\n") + "\n" + footer + "\n";
    }

    privateKey = extractPEMContent(privateKey, "-----BEGIN PRIVATE KEY-----", "-----END PRIVATE KEY-----");
    certificate = extractPEMContent(certificate, "-----BEGIN CERTIFICATE-----", "-----END CERTIFICATE-----");

    options = { key: privateKey, cert: certificate };
    app.set("port", https_port);

    var server = https.createServer(options, app).listen(https_port, function () {
      console.log('HTTPS server listening on port ' + https_port);
    });

    server.on('error', onError);
    server.on('listening', onListening);

    // Redirect HTTP to HTTPS
    http.createServer(function (req, res) {
      res.writeHead(301, { "Location": "https://" + req.headers['host'].replace(port, https_port) + req.url });
      res.end();
    }).listen(port);

  } catch (err) {
    console.error('Error setting up HTTPS server:', err.message);
    process.exit(1);
  }
} else {
  var server = http.createServer(app);
  server.listen(port);
  server.on('error', onError);
  server.on('listening', onListening);
}
